package main

func main() {
	// {@link init-exec-order.png}
	//main包直接依赖pkg1、pkg4两个包；
	//Go运行时会根据包导入的顺序，先去初始化main包的第一个依赖包pkg1；
	//Go运行时遵循“深度优先”原则查看到pkg1依赖pkg2，于是Go运行时去初始化pkg2；
	//pkg2依赖pkg3，Go运行时去初始化pkg3；
	//pkg3没有依赖包，于是Go运行时在pkg3包中按照 <<常量→ 变量→ init函数>> 的顺序进行初始化；
	//pkg3初始化完毕后，Go运行时会回到pkg2并对pkg2进行初始化，之后再回到pkg1并对pkg1进行初始化；
	//在调用完pkg1的init函数后，Go运行时完成main包的第一个依赖包pkg1的初始化；

	//Go运行时接下来会初始化main包的第二个依赖包pkg4；
	//pkg4的初始化过程与pkg1类似，也是先初始化其依赖包pkg5，然后再初始化自身；
	//在Go运行时初始化完pkg4后，也就完成了对main包所有依赖包的初始化，接下来初始化main包自身；
	//在main包中，Go运行时会按照常量→变量→init函数的顺序进行初始化，执行完这些初始化工作后才正式进入程序的入口函数main函数。
	//到这里，我们知道了init函数适合做包级数据的初始化及初始状态检查工作的前提条件是，init函数的执行顺位排在其所在包的包级变量之后
}
